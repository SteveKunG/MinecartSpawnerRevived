plugins {
    id "fabric-loom" version "1.4-SNAPSHOT"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    def commonVmArgs = [
            "-XX:+AllowEnhancedClassRedefinition",
            "-XX:+IgnoreUnrecognizedVMOptions"
    ]
    def commonProperties = ["mixin.debug.export": "true", "mixin.hotSwap": "true"]

    decompilers {
        vineflower {
            options.put("pll", "32767")
            options.put("ind", "    ")
        }
    }

    accessWidenerPath = file("src/main/resources/msr.accesswidener")

    mixin {
        defaultRefmapName = "mixins.msr.refmap.json"
    }

    runs {
        client {
            properties commonProperties
            vmArgs commonVmArgs
            programArgs "--username", "${username}", "--uuid", "${uuid}"
        }
        server {
            properties commonProperties
            vmArgs commonVmArgs
        }
    }
}

repositories {
    maven {
        name "ParchmentMC"
        url "https://maven.parchmentmc.org"
        content {
            includeGroup "org.parchmentmc.data"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchmentmc_version}@zip")
    }
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

String fileName = "${archives_base_name}-mc${minecraft_version}"

remapJar {
    archiveVersion = "v${project.version}"
    archiveBaseName = fileName
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

afterEvaluate {
    loom {
        runs {
            configureEach {
                def mixinJarFile = configurations.compileClasspath.files { it.group == "net.fabricmc" && it.name == "sponge-mixin" }.first()
                vmArg("-javaagent:$mixinJarFile")
            }
        }
    }
}